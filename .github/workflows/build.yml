name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev rpm
    
    - name: Update package.json scripts
      shell: bash
      run: |
        cd app
        if [ -f package.json ]; then
          node -e '
            const fs = require("fs");
            const pkg = JSON.parse(fs.readFileSync("package.json", "utf8"));
            if (!pkg.scripts) pkg.scripts = {};
            pkg.scripts.preinstall = "node scripts/ci-preinstall.js";
            pkg.scripts.prebuild = "node scripts/ci-preinstall.js";
            fs.writeFileSync("package.json", JSON.stringify(pkg, null, 2));
            console.log("Updated package.json scripts");
          '
        fi

    - name: Install dependencies
      working-directory: ./app
      run: npm install --no-package-lock
    
    - name: Clean if needed
      working-directory: ./app
      run: npm run electron:clean || true
    
    - name: Build for Windows
      if: matrix.os == 'windows-latest'
      working-directory: ./app
      run: |
        npm run electron:build:win:portable
        npm run electron:build:win:installer
    
    - name: Build for macOS
      if: matrix.os == 'macos-latest'
      working-directory: ./app
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
      run: npm run electron:build:mac
    
    - name: Build for Linux
      if: matrix.os == 'ubuntu-latest'
      working-directory: ./app
      run: npm run electron:build:linux
    
    - name: Build for Linux ARM64
      if: matrix.os == 'ubuntu-latest'
      working-directory: ./app
      run: npm run electron:build:linux:arm64
    
    - name: Build for Linux ARMv7l
      if: matrix.os == 'ubuntu-latest'
      working-directory: ./app
      run: npm run electron:build:linux:armv7l
    
    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: windows-builds
        path: |
          app/dist/*.exe
          app/dist/*.msi
          app/dist/*.zip
        if-no-files-found: error
    
    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v3
      with:
        name: macos-builds
        path: |
          app/dist/*.dmg
          app/dist/*.zip
        if-no-files-found: error
    
    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v3
      with:
        name: linux-builds
        path: |
          app/dist/*.AppImage
          app/dist/*.deb
          app/dist/*.rpm
          app/dist/*.snap
          app/dist/*.tar.gz
        if-no-files-found: error

  release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
          files: |
            artifacts/**/*.exe
            artifacts/**/*.msi
            artifacts/**/*.zip
            artifacts/**/*.dmg
            artifacts/**/*.AppImage
            artifacts/**/*.deb
            artifacts/**/*.rpm
            artifacts/**/*.snap
            artifacts/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
