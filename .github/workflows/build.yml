name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
    - name: Check out code
      uses: actions/checkout@v4 
    
    - name: Set up Node.js
      uses: actions/setup-node@v4 
      with:
        node-version: '18'
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev rpm
    
    - name: Add missing packages
      working-directory: ./app
      run: |
        npm install react-icons@4.11.0 @vercel/analytics@1.1.1 @vercel/speed-insights@1.0.2 geist

    - name: Patch source files
      shell: bash
      run: |
        cd app
        # Patch layout.tsx
        sed -i.bak 's/import { Geist, Geist_Mono } from "next\/font\/google";/const Geist = (options) => ({ className: "", variable: "--font-geist-sans", style: {} });\nconst Geist_Mono = (options) => ({ className: "", variable: "--font-geist-mono", style: {} });\nconst geistSans = { variable: "--font-geist-sans" };\nconst geistMono = { variable: "--font-geist-mono" };/' src/app/layout.tsx
        sed -i.bak 's/import { Analytics } from "@vercel\/analytics\/react";/const Analytics = () => null;/' src/app/layout.tsx
        sed -i.bak 's/import { SpeedInsights } from "@vercel\/speed-insights\/next";/const SpeedInsights = () => null;/' src/app/layout.tsx
        # Patch Navbar.tsx
        sed -i.bak 's/import { FiHome, FiImage, FiRotateCcw, FiMonitor } from "react-icons\/fi";/const FiHome = (props) => <span role="img" aria-label="home" {...props}>üè†<\/span>;\nconst FiImage = (props) => <span role="img" aria-label="image" {...props}>üñºÔ∏è<\/span>;\nconst FiRotateCcw = (props) => <span role="img" aria-label="rotate" {...props}>üîÑ<\/span>;\nconst FiMonitor = (props) => <span role="img" aria-label="monitor" {...props}>üñ•Ô∏è<\/span>;/' src/components/Navbar.tsx
        # Create clean script
        mkdir -p scripts
        echo 'const fs = require("fs"); const path = require("path"); const dirsToClean = ["out", "dist", ".next"]; for(const dir of dirsToClean) { const dirPath = path.join(__dirname, "..", dir); if (fs.existsSync(dirPath)) { fs.rmSync(dirPath, { recursive: true, force: true }); } }' > scripts/clean.js
        # Make sure it's in package.json
        node -e 'const fs = require("fs"); const pkg = JSON.parse(fs.readFileSync("package.json", "utf8")); if (!pkg.scripts) pkg.scripts = {}; pkg.scripts.electron_clean = "node scripts/clean.js"; fs.writeFileSync("package.json", JSON.stringify(pkg, null, 2));'

    - name: Install dependencies
      working-directory: ./app
      run: npm install --no-package-lock
    
    - name: Build for Windows
      if: matrix.os == 'windows-latest'
      working-directory: ./app
      env:
        USE_HARD_LINKS: false
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        node scripts/clean.js || echo "Clean script ran or skipped"
        npm run electron:build:win:portable
        npm run electron:build:win:installer
    
    - name: Build for macOS
      if: matrix.os == 'macos-latest'
      working-directory: ./app
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
        USE_HARD_LINKS: false
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        node scripts/clean.js || echo "Clean script ran or skipped"
        npm run electron:build:mac
    
    - name: Build for Linux
      if: matrix.os == 'ubuntu-latest'
      working-directory: ./app
      env:
        USE_HARD_LINKS: false
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        node scripts/clean.js || echo "Clean script ran or skipped"
        npm run electron:build:linux
    
    - name: Build for Linux ARM64
      if: matrix.os == 'ubuntu-latest'
      working-directory: ./app
      env:
        USE_HARD_LINKS: false
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        npm run electron:build:linux:arm64
    
    - name: Build for Linux ARMv7l
      if: matrix.os == 'ubuntu-latest'
      working-directory: ./app
      env:
        USE_HARD_LINKS: false
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        npm run electron:build:linux:armv7l
    
    - name: List build outputs
      if: always()
      shell: bash
      run: |
        echo "=== Listing all files in app directory ==="
        find app -type f -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.snap" -o -name "*.tar.gz" -o -name "*.zip" || echo "No matching files found"
    
    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-builds
        path: |
          app/dist/**/*.exe
          app/dist/**/*.msi
          app/dist/**/*.zip
          app/out/**/*.exe
          app/out/**/*.msi
          app/out/**/*.zip
        if-no-files-found: warn

    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-builds
        path: |
          app/dist/**/*.dmg
          app/dist/**/*.zip
          app/out/**/*.dmg
          app/out/**/*.zip
        if-no-files-found: warn 
    
    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-builds
        path: |
          app/dist/**/*.AppImage
          app/dist/**/*.deb
          app/dist/**/*.rpm
          app/dist/**/*.snap
          app/dist/**/*.tar.gz
        if-no-files-found: warn 

  release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
          files: |
            artifacts/**/*.exe
            artifacts/**/*.msi
            artifacts/**/*.zip
            artifacts/**/*.dmg
            artifacts/**/*.AppImage
            artifacts/**/*.deb
            artifacts/**/*.rpm
            artifacts/**/*.snap
            artifacts/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
