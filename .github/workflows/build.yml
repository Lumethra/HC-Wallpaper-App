name: Build Electron App

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release after building'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      release_version:
        description: 'Version for the release (e.g., 0.1.0)'
        required: false
        default: ''
        type: string
  push:
    tags:
      - 'v*'

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Get version from package.json
        id: get-version
        run: echo "version=$(node -p "require('./app/package.json').version")" >> $GITHUB_OUTPUT
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      - name: Determine release version
        id: release-version
        run: |
          if [[ "${{ github.event.inputs.create_release }}" == "true" && "${{ github.event.inputs.release_version }}" != "" ]]; then
            echo "version=${{ github.event.inputs.release_version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_type }}" == "tag" && "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ steps.get-version.outputs.version }}" >> $GITHUB_OUTPUT
          fi
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      release_version: ${{ steps.release-version.outputs.version }}
      date: ${{ steps.date.outputs.date }}

  windows-portable:
    needs: prepare
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json
      - name: Install dependencies
        working-directory: ./app
        run: npm ci
      - name: Build Windows Portable
        working-directory: ./app
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_TARGET: win-portable
        run: npm run electron:build
      - name: Upload Windows Portable artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-portable-x64
          path: app/dist/*.exe
          if-no-files-found: error

  windows-installer:
    needs: prepare
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json
      - name: Install dependencies
        working-directory: ./app
        run: npm ci
      - name: Build Windows Installer
        working-directory: ./app
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_TARGET: win-installer
        run: npm run electron:build
      - name: List build artifacts
        working-directory: ./app/dist
        shell: powershell
        run: Get-ChildItem -Recurse
      - name: Upload Windows Installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer-x64
          path: app/dist/*-Setup-*.exe
          if-no-files-found: error

  macos-x64:
    needs: prepare
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json
      - name: Create macOS entitlements file
        run: |
          mkdir -p ./app/build
          cat > ./app/build/entitlements.mac.plist << EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
              <key>com.apple.security.files.user-selected.read-write</key>
              <true/>
              <key>com.apple.security.automation.apple-events</key>
              <true/>
            </dict>
          </plist>
          EOL
      - name: Install dependencies
        working-directory: ./app
        run: npm ci
      - name: Build macOS x64 DMG
        working-directory: ./app
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_TARGET: mac-x64
        run: npm run electron:build
      - name: Upload macOS x64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-x64-build
          path: app/dist/*.dmg
          if-no-files-found: error

  macos-arm64:
    needs: prepare
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json
      - name: Create macOS entitlements file
        run: |
          mkdir -p ./app/build
          cat > ./app/build/entitlements.mac.plist << EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
              <key>com.apple.security.files.user-selected.read-write</key>
              <true/>
              <key>com.apple.security.automation.apple-events</key>
              <true/>
            </dict>
          </plist>
          EOL
      - name: Install dependencies
        working-directory: ./app
        run: npm ci
      - name: Build macOS ARM64 DMG
        working-directory: ./app
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_TARGET: mac-arm64
        run: npm run electron:build
      - name: Upload macOS ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-build
          path: app/dist/*.dmg
          if-no-files-found: error

  linux-x64:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libglib2.0-dev rpm
      - name: Install dependencies
        working-directory: ./app
        run: npm ci
      - name: Build Linux x64 AppImage
        working-directory: ./app
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_TARGET: linux-x64
        run: npm run electron:build
      - name: Upload Linux x64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64-build
          path: app/dist/*.AppImage
          if-no-files-found: error

  linux-arm64:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libglib2.0-dev rpm
      - name: Install dependencies
        working-directory: ./app
        run: npm ci
      - name: Build Linux ARM64 AppImage
        working-directory: ./app
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_TARGET: linux-arm64
        run: npm run electron:build
      - name: Upload Linux ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-build
          path: app/dist/*.AppImage
          if-no-files-found: error

  linux-armv7l:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libglib2.0-dev rpm
      - name: Install dependencies
        working-directory: ./app
        run: npm ci
      - name: Build Linux ARMv7l AppImage
        working-directory: ./app
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_TARGET: linux-armv7l
        run: npm run electron:build
      - name: Upload Linux ARMv7l artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-armv7l-build
          path: app/dist/*.AppImage
          if-no-files-found: error

  create-release:
    if: ${{ (github.event.inputs.create_release == 'true') || startsWith(github.ref, 'refs/tags/v') }}
    needs: [prepare, windows-portable, windows-installer, macos-x64, macos-arm64, linux-x64, linux-arm64, linux-armv7l]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: List artifacts
        run: find artifacts -type f | sort
      
      - name: Create Release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          name: HC Wallpaper App v${{ needs.prepare.outputs.release_version }}
          tag_name: v${{ needs.prepare.outputs.release_version }}
          draft: false
          prerelease: false
          body: |
            ## HC Wallpaper App v${{ needs.prepare.outputs.release_version }}
            
            Released on ${{ needs.prepare.outputs.date }}
            
            ### Downloads
            - Windows (portable & installer)
            - macOS (Intel & Apple Silicon)
            - Linux (x64, ARM64, & ARMv7)
            
            ### Changes
            _See commit history for details_
          files: |
            artifacts/**/*.exe
            artifacts/**/*.dmg
            artifacts/**/*.AppImage
