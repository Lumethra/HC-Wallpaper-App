name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev rpm libarchive-tools
    
    - name: Setup macOS entitlements
      if: matrix.os == 'macos-latest'
      run: |
        cat > app/entitlements.plist << 'EOL'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
          <dict>
            <key>com.apple.security.cs.allow-jit</key>
            <true/>
            <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
            <true/>
            <key>com.apple.security.cs.disable-library-validation</key>
            <true/>
            <key>com.apple.security.files.user-selected.read-write</key>
            <true/>
            <key>com.apple.security.automation.apple-events</key>
            <true/>
          </dict>
        </plist>
        EOL
    
    - name: Install dependencies
      working-directory: ./app
      run: npm ci
    
    - name: Build Windows Portable
      if: matrix.os == 'windows-latest'
      working-directory: ./app
      run: |
        npm run electron:build:win:portable
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build Windows Installer
      if: matrix.os == 'windows-latest'
      working-directory: ./app
      run: |
        npm run electron:build:win:installer
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build for macOS
      if: matrix.os == 'macos-latest'
      working-directory: ./app
      run: |
        npm run electron:build:mac
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build for Linux x64
      if: matrix.os == 'ubuntu-latest'
      working-directory: ./app
      run: |
        npm run electron:build:linux
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build for Linux ARM64
      if: matrix.os == 'ubuntu-latest'
      working-directory: ./app
      run: |
        npm run electron:build:linux:arm64
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build for Linux ARMv7l
      if: matrix.os == 'ubuntu-latest'
      working-directory: ./app
      run: |
        npm run electron:build:linux:armv7l
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-builds
        path: |
          app/dist/**/*.exe
          app/dist/**/*.msi
        if-no-files-found: warn

    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-builds
        path: app/dist/**/*.dmg
        if-no-files-found: warn
    
    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-builds
        path: |
          app/dist/**/*.AppImage
          app/dist/**/*.deb
          app/dist/**/*.rpm
        if-no-files-found: warn
    
    - name: Upload Linux ARM artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-arm-builds
        path: |
          app/dist/**/*arm64.AppImage
          app/dist/**/*armv7l.AppImage
          app/dist/**/*arm64.deb
          app/dist/**/*armv7l.deb
          app/dist/**/*arm64.rpm
          app/dist/**/*armv7l.rpm
        if-no-files-found: warn

  release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
          files: |
            artifacts/**/*.exe
            artifacts/**/*.msi
            artifacts/**/*.dmg
            artifacts/**/*.AppImage
            artifacts/**/*.deb
            artifacts/**/*.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
